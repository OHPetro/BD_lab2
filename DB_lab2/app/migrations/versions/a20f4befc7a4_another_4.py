"""Another 4

Revision ID: a20f4befc7a4
Revises: 00f277780e0d
Create Date: 2023-05-16 11:40:00.900891

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a20f4befc7a4'
down_revision = '00f277780e0d'
branch_labels = None
depends_on = None
from app import app, db


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    op.drop_table('user2')
    op.drop_table('user')
    op.drop_table('god2')
    op.drop_table('god')
    op.drop_table('user1')
    op.drop_table('base')

    class Base(db.Model):
        __abstract__ = True
        student_id = db.Column(db.Integer, primary_key=True)
        nametest = db.Column(db.Text, unique=False)
        teststatus = db.Column(db.Text, unique=False)
        ball100 = db.Column(db.Text, unique=False)
        ball12 = db.Column(db.Text, unique=False)
        ball = db.Column(db.Text, unique=False)
        adaptscale = db.Column(db.Text, unique=False)
        ptname = db.Column(db.Text, unique=False)
        regname = db.Column(db.Text, unique=False)
        ptareaname = db.Column(db.Text, unique=False)
        pttername = db.Column(db.Text, unique=False)

    table_names = ['Ukr', 'Hist', 'Math', 'Phys', 'Chem', 'Bio', 'Geo', 'Engl', 'Fra', 'Deut', 'Spa']

    # class Ukr(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Hist(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Math(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Phys(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Chem(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Bio(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Geo(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Engl(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Fra(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Deut(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    # class Spa(db.Model):
    #     student_id = db.Column(db.Integer, primary_key=True)
    #     nametest = db.Column(db.Text, unique=False)
    #     teststatus = db.Column(db.Text, unique=False)
    #     ball100 = db.Column(db.Text, unique=False)
    #     ball12 = db.Column(db.Text, unique=False)
    #     ball = db.Column(db.Text, unique=False)
    #     adaptscale = db.Column(db.Text, unique=False)
    #     ptname = db.Column(db.Text, unique=False)
    #     regname = db.Column(db.Text, unique=False)
    #     ptareaname = db.Column(db.Text, unique=False)
    #     pttername = db.Column(db.Text, unique=False)
    #
    #
    #
    # db.create_all()
    # db.session.commit()





def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('base',
    sa.Column('student_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nametest', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('teststatus', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ball100', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ball12', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ball', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('adaptscale', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ptname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('regname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ptareaname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('pttername', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('student_id', name='base_pkey')
    )
    op.create_table('school',
    sa.Column('school_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('eoname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eotypename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eoregname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eoareaname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eotername', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('eoparent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('school_id', name='school_pkey')
    )
    op.create_table('user1',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user1_pkey'),
    sa.UniqueConstraint('email', name='user1_email_key'),
    sa.UniqueConstraint('name', name='user1_name_key')
    )
    op.create_table('god',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='god_pkey'),
    sa.UniqueConstraint('email', name='god_email_key')
    )
    op.create_table('god2',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='god2_pkey'),
    sa.UniqueConstraint('email', name='god2_email_key')
    )
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('email', name='user_email_key'),
    sa.UniqueConstraint('name', name='user_name_key')
    )
    op.create_table('students',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('birth', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sextype', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('regname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('areaname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tername', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('regtypename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tertypename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('classprofilename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('classlangname', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='students_pkey')
    )
    op.create_table('user2',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user2_pkey'),
    sa.UniqueConstraint('name', name='user2_name_key')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key')
    )
    # ### end Alembic commands ###
